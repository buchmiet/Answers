name: .NET Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'

    - name: Use GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true
        configFilePath: '.gitversion.yml'

    - name: Restore dependencies
      run: dotnet restore Answers.sln

    - name: Build
      run: dotnet build --no-restore -c Release Answers.sln

    - name: Run tests
      run: dotnet test --no-build -c Release --collect:"XPlat Code Coverage" --settings coverlet.runsettings

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: Answers.Tests/TestResults/**/*.xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
       token: ${{ secrets.CODECOV_TOKEN }}
       files: Answers.Tests/TestResults/**/*.xml
       flags: unittests
       name: code-coverage-report
       fail_ci_if_error: true
    - name: Clear GitHub Actions Cache
      run: |
        rm -rf ${{ github.workspace }}/.git
    - name: Display GitVersion Config
      run: cat .gitversion.yml
    - name: Print GitVersion Output
      run: |
       echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
    # Pack and publish only on pushes to main
    - name: Pack NuGet package
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: dotnet pack Answers.Packaging/Answers.Packaging.csproj -c Release -p:PackageVersion=${{ steps.gitversion.outputs.SemVer }} --output ./output

    - name: Publish to NuGet
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: dotnet nuget push ./output/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
